# Thresholding the weighted networks according the "percolation technique"

# INPUT: real weighted networks as weighted adjacency matrices
# OUTPUT: real unweighted networks as binary thresholded matrices and as edgelists

# Library
library(igraph)

# Change your path for the folder: fMRI_Healthy_NKI_Rockland/fMRI
path <- "fMRI_Healthy_NKI_Rockland/fMRI"

# Create an empty folder "real_adj" to save outputs
path1 <- "real_adj"
# Create an empty folder "real_edgelist" to save outputs
path2 <- "real_edgelist"

# different percentages used for proportional thresholding technique
pers <- 1:4

filenames <- list.files(paste0(path), pattern="*.txt") # to have file names
subjects <- vector() # txt names
for(i in 1:length(filenames)){
  if(((i-1)%%4)==0){ # saving only adj matrices txt
    subjects <- append(subjects, filenames[i])
  }
}

# Deriving GroupMean network
somma <- read.csv(paste0(path, "/", subjects[1]), header=F, sep="")
for(i in 2:length(subjects)){
  data <- read.csv(paste0(path, "/", subjects[i]), header=F, sep="")
  data <- as.matrix(data) # transforming in a matrix
  somma <- somma + data
}
data_fmri <- somma/length(subjects)
data_fmri <- as.matrix(data_fmri)
g_fmri <- graph.adjacency(data_fmri, mode="undirected", weighted=TRUE) # GroupMean network

g_fmri <- delete.edges(g_fmri, which(E(g_fmri)$weight < 0)) # deleting edges (=0) with negative weights to compute the community detection

clu <- cluster_louvain(g_fmri)
n_LCC <- which(table(clu$membership) %in% max(table(clu$membership))) # number of the LCC
v_LCC <- which(clu$membership %in% n_LCC) # number of vertices in the LCC
min_weight_LCC <- min(E(g_fmri)$weight[v_LCC]) # the critical point where the largest component starts breaking apart: the percolation threshold

# to calculate graph density:
# n <- length(V(g))
# round(length(E(g))/(n*(n-1)/2),3)

# 4 selected thresholds (deleting edges under the weight):
# weight 0.09331443 density 0.902 (percolation threshold)
# weight 0.2 density 0.691
# weight 0.35 density 0.308
# weight 0.5 density 0.102

# GroupMean

thrs <- c(0.5,0.35,0.2,min_weight_LCC) # 4 selected thresholds (deleting edges under the weight)
pers <- 1:length(thrs)

g <- delete.edges(g_fmri, which(E(g_fmri)$weight < min_weight_LCC))
g <- delete.edges(g_fmri, which(E(g_fmri)$weight < 0.35))


for(per in pers){
  thr <- thrs[per]
  assign(paste0("thr_gm_",per), thr) # saving threshold values
  g <- delete.edges(g_fmri, which(E(g_fmri)$weight < thr))
  adj <- as.matrix(as_adjacency_matrix(g))
  write.csv(adj, file = paste0(path1,"/A", per, ".csv")) # saving adj matrix

  LCC <- vector()
  v1 <- as.vector(V(g))
  components <- igraph::clusters(g, mode="weak")
  biggest_cluster_id <- which.max(components$csize)
  vert_ids <- V(g)[components$membership == biggest_cluster_id]
  v2 <- as.vector(vert_ids)
  g <- igraph::induced_subgraph(g, vert_ids)

  df <- as.data.frame(as_edgelist(g))
  edgelist <- data.frame(edges=rep(NA, nrow(df)))
  for(r in 1:nrow(df)){
    name <- paste0(gsub("V","",df[r,1])," ",gsub("V","",df[r,2]))
    edgelist[r,1] <- name
  }
  nome <- paste0(path2,"/EL", per, ".txt")
  write.table(edgelist, file=nome, row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE) # saving edgelists
}

# Subjects

for(i in 1:length(subjects)){
  data <- read.csv(paste0(path, "/", subjects[i]), header=F, sep="")
  data <- as.matrix(data)
  gs <- graph.adjacency(data, mode="undirected", weighted=TRUE) # subject weighted graph not thresholded
  for(per in pers){
    thr <- get(paste0("thr_gm_",per))
    g <- delete.edges(gs, which(E(gs)$weight < thr))
    
    adj <- as.matrix(as_adjacency_matrix(g))
    write.csv(adj, file = paste0(path1,"/A", per, "_p", i, ".csv")) # saving adj matrix

    LCC <- vector()
    v1 <- as.vector(V(g))
    components <- igraph::clusters(g, mode="weak")
    biggest_cluster_id <- which.max(components$csize)
    vert_ids <- V(g)[components$membership == biggest_cluster_id]
    v2 <- as.vector(vert_ids)
    g <- igraph::induced_subgraph(g, vert_ids)
  
    df <- as.data.frame(as_edgelist(g))
    edgelist <- data.frame(edges=rep(NA, nrow(df)))
    for(r in 1:nrow(df)){
      name <- paste0(gsub("V","",df[r,1])," ",gsub("V","",df[r,2]))
      edgelist[r,1] <- name
    }
    nome <- paste0(path2,"/EL", per, "_p", i, ".txt")
    write.table(edgelist, file=nome, row.names=FALSE, col.names=FALSE, sep="\t", quote=FALSE) # saving edgelists
  }
}
